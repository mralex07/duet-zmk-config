#include "mouse.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF 0
#define NWD 1
#define NAV 2
#define SYM 3
#define FUN 4
#define mouse 5
#define KEYS_L 0 1 2 3 4 30 10 11 12 13 14 31 20 21 22 23 24  // left-hand keys
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 39 25 26 27 28 29 38  // right-hand keys
#define THUMBS 32 33 34 35 36 37

// Mouse config copied from urob's config

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&mmv {
    acceleration-exponent = <1>;      // 1
    time-to-max-speed-ms = <500>;    // 40
    delay-ms = <0>;                   // 0
};

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <40>;      // 500
    delay-ms = <0>;                   // 10
};

// Customized caps word to allow for easier canceling and accented characters

&caps_word {
    /delete-property/ ignore-modifiers; // Canceling &caps_word with mods avoids `CMD-SHIFT-S` when I was just trying to type `CMD-S`, since CMD will cancel &caps_word
    continue-list = <UNDERSCORE MINUS SQT CARET TILDE GRAVE K_CANCEL BACKSPACE DELETE LSHFT>; // adding LSHFT is required to use some dead keys for diacriticals in PT-BR  (such as ~, ` and ^). This makes RSHFT a better candidate for my thumb key, as it can cancel &capsword on activation
};

// Emulating Callum's timerless OSM behaviour as close as possible

&sk {
    quick-release; // avoids "THis" problem
    release-after-ms = <600000>; // 1000 ms is default. I've set mine to a bonkers 10 minutes timer in order to emulate Callum's OSM, which is timeless, as close as possible
};

// Hold-taps

&lt { flavor = "hold-preferred"; }; // Using it in NWD and AOE layers
&mt { flavor = "balanced"; }; // Globe/fn and AOE mod-taps for gaming
&encoder { status = "okay"; };

/ {
    combos {
        compatible = "zmk,combos";

        // Left hand combos for use with the mouse on the right-hand or from AOE layers

        left_hand_esc_combo {
            bindings = <&kp ESCAPE>;
            require-prior-idle-ms = <200>; // Followind urob's formula for my 52 relaxed WPM: 10500/52 wpm â‰… 200 ms
            timeout-ms = <30>;
            layers = <0>;
            key-positions = <0 11>;
        };

        left_hand_tab_combo {
            bindings = <&kp TAB>;
            require-prior-idle-ms = <200>;
            timeout-ms = <30>;
            layers = <0>;
            key-positions = <1 12>;
        };

        left_hand_backspace_combo {
            bindings = <&kp BSPC>;
            require-prior-idle-ms = <200>;
            timeout-ms = <30>;
            layers = <0 2>;
            key-positions = <2 13>;
        };

        left_hand_enter_combo {
            bindings = <&kp ENTER>;
            require-prior-idle-ms = <200>;
            timeout-ms = <30>;
            layers = <0 2>;
            key-positions = <3 14>;
        };

        left_hand_del_combo {
            bindings = <&kp DEL>;
            require-prior-idle-ms = <200>;
            timeout-ms = <30>;
            layers = <0>;
            key-positions = <4 15>;
        };

        // Special layer toggles

        switch_lang {
            key-positions = <35 36>;
            layers = <0 2>;
            bindings = <&kp LC(SPACE)>;
        };

        enter {
            key-positions = <37 38>;
            layers = <0 1>;
            bindings = <&kp ENTER>;
        };

        activate_smart_mouse_layer_combo {
            key-positions = <30 31 29>;
            layers = <0>;
            bindings = <&smart_mouse>;
        };

        // Keyboard adjustments combos (replaces a dedicated SYS layer)

        sys_bootloader {
            key-positions = <20 21>;
            layers = <4>;
            bindings = <&bootloader>;
        };

        sys_toggle_bt0_connection {
            key-positions = <3 4>;
            layers = <1>;
            bindings = <&bt BT_SEL 0>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
        };

        sys_toggle_bt1_connection {
            key-positions = <14 15>;
            layers = <1>;
            bindings = <&bt BT_SEL 1>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
        };

        sys_toggle_bt2_connection {
            key-positions = <27 26>;
            layers = <1>;
            bindings = <&bt BT_SEL 2>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
        };

        sys_clear_current_bluetooth_profile {
            key-positions = <28 29>;
            layers = <1>;
            bindings = <&bt BT_CLR>;
            timeout-ms = <30>;
            require-prior-idle-ms = <200>;
        };

        // Anachronic inspired combos to avoid problems SYM keys in quick succession when the corresponding key is pressed quickly before the layer key (https://github.com/theol0403/anachron-zmk-config)
        // I guess this is more of a problem when using mod-taps on thumbs, which is not my case
    };

    behaviors {
        shft_cw: shift_and_caps_word {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp RSHFT>, <&caps_word>;
        };

        playnextprev: play_next_previous_media {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
        };

        numword_td: numword_tap_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&numword>, <&tog NWD>;
        };

        numword: numword {
            compatible = "zmk,behavior-caps-word"; // Custom caps-word (PR #1451)
            #binding-cells = <0>;
            layers = <1>;
            continue-list = <BACKSPACE DELETE LPAR RPAR DOT COMMA SEMI COLON SLASH PLUS MINUS ASTRK EQUAL LGUI LALT LCTRL LSHFT RGUI RALT RCTRL>; // RSHFT tap on left thumb will cancel without entering any other character
            ignore-numbers;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            #binding-cells = <0>;
            bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;

            ignored-key-positions = <0 3 7 9 16 17 18 28 29>; // Tab, Shift, Arrow key positions and DEL/BSPC to quit app/close window from altTab
        };

        smart_mouse: smart_mouse {
            compatible = "zmk,behavior-tri-state"; // requires tri-state (PR #1366)
            #binding-cells = <0>;
            bindings = <&tog 5>, <&none>, <&tog 5>;

            ignored-layers = <5>;
            ignored-key-positions = <
            7 16 17 18
            5 15 6 8 
            32 33 
            26 27 28 
            10 11 12 13 
            20 21 22 23 
            1 2 3 
            >;

            // Every key set in mouse layer
        };
    };

    macros {
        lc: mo_layer_switch_with_an_embeded_cancel_tap {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings =
                <&macro_tap>,
                <&kp K_CANCEL &macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 3>;
            then-layer = <4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEF {
            bindings = <
           &kp Q        &kp W   &kp E      &kp R               &kp T          &kp Y      &kp U                          &kp I      &kp O    &kp P
&kp EQUAL  &kp A        &kp S   &kp D      &kp F               &kp G          &kp H      &kp J                          &kp K      &kp L    &kp SEMI   &kp SQT
&kp MINUS  &mt GLOBE Z  &kp X   &kp C      &kp V               &kp B          &kp N      &kp M                          &kp COMMA  &kp DOT  &kp SLASH  &kp GRAVE
                                &lt 4 ESC  &lt 2 LEFT_BRACKET  &lt 1 SPACE    &lt 3 SQT  &mt RIGHT_SHIFT RIGHT_BRACKET  &lt 4 DEL
&kp LEFT   &kp DOWN     &kp UP  &kp RIGHT  &kp ESC                                                                                 &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        NAV {
            bindings = <
        &kp TAB          &swapper   &kp LS(LC(TAB))  &kp LC(TAB)  &kp C_VOL_UP     &kp PG_UP  &kp HOME      &kp UP        &kp END            &kp BSPC
&none   &sk LCTRL        &sk LALT   &sk LSHFT        &sk LGUI     &kp C_VOL_DN     &kp PG_DN  &kp LEFT      &kp DOWN      &kp RIGHT          &kp ENTER  &kp PAUSE_BREAK
&none   &mt GLOBE LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &playnextprev    &kp F18    &kp LG(LBKT)  &kp LG(RBKT)  &kp LG(LS(SPACE))  &kp DEL    &none
                                    &trans           &trans       &kp ESC          &trans     &trans        &trans
&trans  &trans           &trans     &trans           &trans                                                               &trans
            >;
        };

        NWD {
            bindings = <
           &kp DOT    &kp N7  &kp N8  &kp N9    &kp COLON    &trans  &trans          &trans     &trans    &trans
&kp LCTRL  &kp MINUS  &kp N4  &kp N5  &kp N6    &kp SLASH    &trans  &sk RGUI        &sk LSHFT  &sk RALT  &sk RCTRL  &none
&kp LSHFT  &kp PLUS   &kp N1  &kp N2  &kp N3    &kp ASTRK    &trans  &trans          &trans     &trans    &trans     &none
                              &trans  &lt 2 N0  &kp COMMA    &trans  &lt 3 K_CANCEL  &trans
&trans     &trans     &trans  &trans  &trans                                                    &trans
            >;
        };

        SYM {
            bindings = <
           &kp ESC    &kp LBRC   &kp LBKT   &kp LPAR   &kp TILDE            &kp CARET    &kp RPAR  &kp RBKT   &kp RBRC   &kp GRAVE
&kp LCTRL  &kp MINUS  &kp ASTRK  &kp EQUAL  &kp UNDER  &kp DLLR             &kp HASH     &sk RGUI  &sk LSHFT  &sk RALT   &kp COLON  &none
&kp LSHFT  &kp PLUS   &kp PIPE   &kp AT     &kp FSLH   &kp PRCNT            &kp LA(N6)   &kp BSLH  &kp AMPS   &kp QMARK  &kp EXCL   &none
                                 &trans     &trans     &kp LC(LG(SPACE))    &numword_td  &trans    &trans
&trans     &trans     &trans     &trans     &trans                                                            &trans
            >;
        };

        FUN {
            bindings = <
           &kp N1     &kp N2    &kp N3     &kp N4    &kp N5           &kp N6        &kp N7    &kp N8     &kp N9    &kp N0
&kp LCTRL  &sk LCTRL  &sk LALT  &sk LSHFT  &sk LGUI  &kp F11          &kp F12       &sk RGUI  &sk LSHFT  &sk RALT  &sk RCTRL  &none
&kp LSHFT  &kp F1     &kp F2    &kp F3     &kp F4    &kp F5           &kp F6        &kp F7    &kp F8     &kp F9    &kp F10    &none
                                &trans     &trans    &kp LC(LG(Q))    &kp CAPSLOCK  &trans    &trans
&trans     &trans     &trans    &trans     &trans                                                        &trans
            >;
        };

        mouse {
            bindings = <
       &none            &none      &kp LS(LC(TAB))  &kp LC(TAB)  &none    &msc SCRL_DOWN  &msc SCRL_RIGHT  &mmv MOVE_UP    &msc SCRL_LEFT   &none
&none  &kp LCTRL        &kp LALT   &kp LSHFT        &kp LCMD     &none    &msc SCRL_UP    &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none  &none
&none  &mt GLOBE LG(Z)  &kp LG(X)  &kp LG(C)        &kp LG(V)    &none    &none           &mkp MB3         &mkp MB4        &mkp MB5         &none  &none
                                   &none            &none        &none    &mkp MB1        &mkp MB2         &trans
&none  &none            &none      &none            &none                                                                  &none
            >;
        };
    };
};
